python module tt_f90 ! in 
    interface  ! in :tt_f90
        module tt_f90 ! in :tt_f90:tt_f90.f90
            use tt_lib
            use python_conv_lib
            use ttop_lib
            real(kind=8), allocatable,dimension(:) :: core
            complex(kind=8), allocatable,dimension(:) :: zcore

            subroutine dfull_to_tt(a,n,d,eps,rmax,r,ps) ! in :tt_f90:tt_f90.f90:tt_f90
                real(kind=8) dimension(:),intent(in) :: a
                integer dimension(:),intent(in) :: n
                integer intent(in) :: d
                real(kind=8) intent(in) :: eps
                integer, optional, intent(in) :: rmax
                integer dimension(d + 1),intent(out),depend(d) :: r
                integer dimension(d + 1),intent(out),depend(d) :: ps
            end subroutine dfull_to_tt

            subroutine zfull_to_tt(a,n,d,eps,rmax,r,ps) ! in :tt_f90:tt_f90.f90:tt_f90
                complex(kind=8) dimension(:),intent(in) :: a
                integer dimension(:),intent(in) :: n
                integer intent(in) :: d
                real(kind=8) intent(in) :: eps
                integer, optional, intent(in) :: rmax
                integer dimension(d + 1),intent(out),depend(d) :: r
                integer dimension(d + 1),intent(out),depend(d) :: ps
            end subroutine zfull_to_tt

            subroutine tt_dealloc ! in :tt_f90:tt_f90.f90:tt_f90
            end subroutine tt_dealloc
            
            subroutine dtt_write_wrapper(n,r,d,ps,cr,crsize,fnam)
                integer dimension(d),intent(in) :: n
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: ps
                character(len=*),intent(in) :: fnam
                double precision dimension(crsize),intent(in) :: cr
                integer, optional,intent(in),check(len(cr)>=crsize),depend(cr) :: crsize=len(cr)
            end subroutine dtt_write_wrapper
            
            subroutine ztt_write_wrapper(n,r,d,ps,cr,crsize,fnam)
                integer dimension(d),intent(in) :: n
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: ps
                character(len=*),intent(in) :: fnam
                complex(8) dimension(crsize),intent(in) :: cr
                integer, optional,intent(in),check(len(cr)>=crsize),depend(cr) :: crsize=len(cr)
            end subroutine ztt_write_wrapper
            
            subroutine dtt_to_full(n,r,d,ps,cr,crsize,a,asize) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: ps
                double precision dimension(crsize),intent(in) :: cr
                integer, optional,intent(in),check(len(cr)>=crsize),depend(cr) :: crsize=len(cr)
                double precision dimension(asize),intent(out),depend(asize) :: a
                integer intent(in) :: asize
            end subroutine dtt_to_full
            
            subroutine ztt_to_full(n,r,d,ps,cr,crsize,a,asize) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: ps
                complex(8) dimension(crsize),intent(in) :: cr
                integer, optional,intent(in),check(len(cr)>=crsize),depend(cr) :: crsize=len(cr)
                complex(8) dimension(asize),intent(out),depend(asize) :: a
                integer intent(in) :: asize
            end subroutine ztt_to_full
            
            subroutine dtt_add(n,d,r1,r2,ps1,ps2,core1,core2,rres,psres) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                real(kind=8) dimension(:),intent(in) :: core1
                real(kind=8) dimension(:),intent(in) :: core2
                integer dimension(d + 1),intent(out),depend(d) :: rres
                integer dimension(d + 1),intent(out),depend(d) :: psres
            end subroutine dtt_add
            
            subroutine ztt_add(n,d,r1,r2,ps1,ps2,core1,core2,rres,psres) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                complex(kind=8) dimension(:),intent(in) :: core1
                complex(kind=8) dimension(:),intent(in) :: core2
                integer dimension(d + 1),intent(out),depend(d) :: rres
                integer dimension(d + 1),intent(out),depend(d) :: psres
            end subroutine ztt_add
            subroutine dtt_compr2(n,d,r,ps,cr,eps,rmax) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(inout),depend(d) :: r
                integer dimension(d + 1),intent(inout),depend(d) :: ps
                real(kind=8) dimension(:),intent(in) :: cr
                real(kind=8) intent(in) :: eps
                integer intent(in) :: rmax
            end subroutine dtt_compr2
            subroutine ztt_compr2(n,d,r,ps,cr,eps,rmax) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(inout),depend(d) :: r
                integer dimension(d + 1),intent(inout),depend(d) :: ps
                complex(kind=8) dimension(:),intent(in) :: cr
                real(kind=8) intent(in) :: eps
                integer intent(in) :: rmax
            end subroutine ztt_compr2
            subroutine dtt_dotprod(n,d,r1,r2,ps1,ps2,core1,core2,dt,dtsize)
                integer dimension(d),intent(in) :: n
                integer, intent(in) :: dtsize
                real(kind=8) dimension(dtsize), intent(out) :: dt
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                real(kind=8) dimension(:),intent(in) :: core1
                real(kind=8) dimension(:),intent(in) :: core2
           end subroutine dtt_dotprod
            subroutine ztt_dotprod(n,d,r1,r2,ps1,ps2,core1,core2,dt,dtsize)
                integer dimension(d),intent(in) :: n
                integer, intent(in) :: dtsize
                complex(kind=8) dimension(dtsize), intent(out) :: dt
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                complex(kind=8) dimension(:),intent(in) :: core1
                complex(kind=8) dimension(:),intent(in) :: core2
           end subroutine ztt_dotprod
            
            subroutine dtt_nrm(n,d,r,ps,cr,nrm) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer dimension(d + 1),intent(in),depend(d) :: ps
                real(kind=8) dimension(:),intent(in) :: cr
                real(kind=8) intent(out) :: nrm
            end subroutine dtt_nrm
            subroutine ztt_nrm(n,d,r,ps,cr,nrm) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r
                integer dimension(d + 1),intent(in),depend(d) :: ps
                complex(kind=8) dimension(:),intent(in) :: cr
                real(kind=8) intent(out) :: nrm
            end subroutine ztt_nrm
            subroutine dtt_hdm(n,d,r1,r2,ps1,ps2,core1,core2,rres,psres) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                real(kind=8) dimension(:),intent(in) :: core1
                real(kind=8) dimension(:),intent(in) :: core2
                integer dimension(d + 1),intent(out),depend(d) :: rres
                integer dimension(d + 1),intent(out),depend(d) :: psres
            end subroutine dtt_hdm
            subroutine ztt_hdm(n,d,r1,r2,ps1,ps2,core1,core2,rres,psres) ! in :tt_f90:tt_f90.f90:tt_f90
                integer dimension(d),intent(in) :: n
                integer, optional,intent(in),check(len(n)>=d),depend(n) :: d=len(n)
                integer dimension(d + 1),intent(in),depend(d) :: r1
                integer dimension(d + 1),intent(in),depend(d) :: r2
                integer dimension(d + 1),intent(in),depend(d) :: ps1
                integer dimension(d + 1),intent(in),depend(d) :: ps2
                complex(kind=8) dimension(:),intent(in) :: core1
                complex(kind=8) dimension(:),intent(in) :: core2
                integer dimension(d + 1),intent(out),depend(d) :: rres
                integer dimension(d + 1),intent(out),depend(d) :: psres
            end subroutine ztt_hdm
        end module tt_f90
    end interface 
end python module tt_f90

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
